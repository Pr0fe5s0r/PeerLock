const { ethers } = require('ethers');
const fs = require('fs');
const { exit } = require('process');
const key = require("../key.json")
const abi = require("./abi.json")

async function deploySmartContract() {
  // Create a new Web3 instance
  //const web3 = new Web3('https://filecoin-calibration.chainup.net/rpc/v1');
  const provider = new ethers.WebSocketProvider('wss://wss.calibration.node.glif.io/apigw/lotus/rpc/v0');

  // Read the compiled contract bytecode and ABI from files
  const bytecode = "60806040526609bbc42ccccf8060035534801561001a575f80fd5b505f600190505b600a81116100d85760405180606001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f8152505f808381526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015590505080806100d09061015c565b915050610021565b5060016002819055503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101a3565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f819050919050565b5f61016682610153565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361019857610197610126565b5b600182019050919050565b6110dc806101b05f395ff3fe608060405260043610610085575f3560e01c80637c2c9728116100585780637c2c9728146101475780638a5d9cd8146101715780638c64ea4a146101995780638da5cb5b146101d7578063ebb9ca211461020157610085565b806315ca14811461008957806327bdcad7146100b35780633f831b35146100ef578063403115991461010b575b5f80fd5b348015610094575f80fd5b5061009d61023d565b6040516100aa9190610b97565b60405180910390f35b3480156100be575f80fd5b506100d960048036038101906100d49190610bde565b610248565b6040516100e69190610c23565b60405180910390f35b61010960048036038101906101049190610bde565b610357565b005b348015610116575f80fd5b50610131600480360381019061012c9190610bde565b610606565b60405161013e9190610b97565b60405180910390f35b348015610152575f80fd5b5061015b610735565b6040516101689190610b97565b60405180910390f35b34801561017c575f80fd5b5061019760048036038101906101929190610bde565b61073e565b005b3480156101a4575f80fd5b506101bf60048036038101906101ba9190610bde565b6109aa565b6040516101ce93929190610c7b565b60405180910390f35b3480156101e2575f80fd5b506101eb6109ee565b6040516101f89190610cb0565b60405180910390f35b34801561020c575f80fd5b5061022760048036038101906102229190610bde565b610a13565b6040516102349190610b97565b60405180910390f35b662386f26fc1000081565b5f6001821015801561025b5750600a8211155b61029a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029190610d23565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff165f808481526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033090610d8b565b60405180910390fd5b425f808481526020019081526020015f206001015410159050919050565b600181101580156103695750600a8111155b6103a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039f90610d23565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff165f808381526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610447576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043e90610df3565b60405180910390fd5b670de0b6b3a7640000341015610492576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048990610e5b565b60405180910390fd5b335f808381526020019081526020015f205f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506301e13380426104f29190610ea6565b5f808381526020019081526020015f2060010181905550425f808381526020019081526020015f206002018190555060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60035490811502906040515f60405180830381858888f19350505050158015610587573d5f803e3d5ffd5b50600160025f82825461059a9190610ea6565b92505081905550803373ffffffffffffffffffffffffffffffffffffffff167faa1f2ec183181ea56d06984d780201f1eb9c1bb9775edefc3b5a3e3f8315992b5f808581526020019081526020015f20600101546040516105fb9190610b97565b60405180910390a350565b5f600182101580156106195750600a8211155b610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f90610d23565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff165f808481526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036106f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ee90610d8b565b60405180910390fd5b5f425f808581526020019081526020015f20600101546107179190610ed9565b90505f62015180826107299190610f39565b90508092505050919050565b5f600254905090565b600181101580156107505750600a8111155b61078f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078690610d23565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff165f808381526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361082e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082590610d8b565b60405180910390fd5b5f808281526020019081526020015f20600201544211610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a90610fd9565b60405180910390fd5b5f620151805f808481526020019081526020015f2060020154426108a79190610ed9565b6108b19190610f39565b90505f81116108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ec90611041565b60405180910390fd5b5f5b818110156109a557620151805f808581526020019081526020015f206002015f8282546109249190610ea6565b9250508190555060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60035490811502906040515f60405180830381858888f19350505050158015610991573d5f803e3d5ffd5b50808061099d9061105f565b9150506108f7565b505050565b5f602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f60018210158015610a265750600a8211155b610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c90610d23565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff165f808481526020019081526020015f205f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afb90610d8b565b60405180910390fd5b5f620151805f808581526020019081526020015f206002015442610b289190610ed9565b610b329190610f39565b90505f8111610b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6d90611041565b60405180910390fd5b80915050919050565b5f819050919050565b610b9181610b7f565b82525050565b5f602082019050610baa5f830184610b88565b92915050565b5f80fd5b610bbd81610b7f565b8114610bc7575f80fd5b50565b5f81359050610bd881610bb4565b92915050565b5f60208284031215610bf357610bf2610bb0565b5b5f610c0084828501610bca565b91505092915050565b5f8115159050919050565b610c1d81610c09565b82525050565b5f602082019050610c365f830184610c14565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610c6582610c3c565b9050919050565b610c7581610c5b565b82525050565b5f606082019050610c8e5f830186610c6c565b610c9b6020830185610b88565b610ca86040830184610b88565b949350505050565b5f602082019050610cc35f830184610c6c565b92915050565b5f82825260208201905092915050565b7f496e76616c6964207661756c74204944000000000000000000000000000000005f82015250565b5f610d0d601083610cc9565b9150610d1882610cd9565b602082019050919050565b5f6020820190508181035f830152610d3a81610d01565b9050919050565b7f5661756c74206e6f74206f6363757069656400000000000000000000000000005f82015250565b5f610d75601283610cc9565b9150610d8082610d41565b602082019050919050565b5f6020820190508181035f830152610da281610d69565b9050919050565b7f5661756c7420616c7265616479206f63637570696564000000000000000000005f82015250565b5f610ddd601683610cc9565b9150610de882610da9565b602082019050919050565b5f6020820190508181035f830152610e0a81610dd1565b9050919050565b7f496e73756666696369656e742045544820616d6f756e740000000000000000005f82015250565b5f610e45601783610cc9565b9150610e5082610e11565b602082019050919050565b5f6020820190508181035f830152610e7281610e39565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610eb082610b7f565b9150610ebb83610b7f565b9250828201905080821115610ed357610ed2610e79565b5b92915050565b5f610ee382610b7f565b9150610eee83610b7f565b9250828203905081811115610f0657610f05610e79565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610f4382610b7f565b9150610f4e83610b7f565b925082610f5e57610f5d610f0c565b5b828204905092915050565b7f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206f6e63655f8201527f2070657220646179000000000000000000000000000000000000000000000000602082015250565b5f610fc3602883610cc9565b9150610fce82610f69565b604082019050919050565b5f6020820190508181035f830152610ff081610fb7565b9050919050565b7f4e6f207265776172647320746f20636c61696d000000000000000000000000005f82015250565b5f61102b601383610cc9565b915061103682610ff7565b602082019050919050565b5f6020820190508181035f8301526110588161101f565b9050919050565b5f61106982610b7f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361109b5761109a610e79565b5b60018201905091905056fea2646970667358221220e94b3f519e0b5472c25b1238c946840619befae8e6fa4a8404923d1aacdd870a64736f6c63430008140033";

  // Set the private key for the deployer account
  const privateKey = key.privateKey;;

  // Create a wallet instance from the private key
  const wallet = new ethers.Wallet(privateKey, provider);

  // Create a new contract factory using the bytecode and ABI
  const contractFactory = new ethers.ContractFactory(abi, bytecode, wallet);

  // Deploy the contract
  const contract = await contractFactory.deploy();

  await contract.deploymentTransaction().wait()
    // Wait for a few seconds before checking again
//     console.log(await contract.deploymentTransaction().isMined()+ "Checking again to get hash:"+ contract.deploymentTransaction().hash)
//     await new Promise((resolve) => setTimeout(resolve, 5000));
//   }

  // Print the deployed contract address
  console.log({'"contract"': '"'+await contract.getAddress()+'"', '"transaction_hash"': '"'+contract.deploymentTransaction().hash+'"'});
}


deploySmartContract().catch((err) => {
  console.error('Failed to deploy contract:', err);
}).then(()=>{
    exit();
})
